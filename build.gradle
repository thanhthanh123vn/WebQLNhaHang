/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id "org.hidetake.ssh" version "2.11.2"
    id 'war'
}

apply plugin: 'org.hidetake.ssh'
remotes {
    host {
        host = '192.168.159.128'
        user = 'nguyenthanh'
        password = 'thanh0401@'
    }
}
ssh.settings {
    knownHosts = allowAnyHosts
}
repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    api libs.jakarta.servlet.jsp.jstl.jakarta.servlet.jsp.jstl.api
    api libs.org.glassfish.web.jakarta.servlet.jsp.jstl
    api libs.org.mindrot.jbcrypt
    api libs.org.glassfish.jersey.containers.jersey.container.servlet
    api libs.org.glassfish.jersey.media.jersey.media.json.jackson
    api libs.org.jboss.weld.servlet.weld.servlet.shaded
    api libs.org.hibernate.orm.hibernate.core
    api libs.org.hibernate.validator.hibernate.validator
    api libs.org.glassfish.jaxb.jaxb.runtime
    api libs.com.mysql.mysql.connector.j
    api libs.com.google.code.gson.gson
    testImplementation libs.org.junit.jupiter.junit.jupiter.api
    testImplementation libs.org.junit.jupiter.junit.jupiter.engine
    providedCompile libs.jakarta.servlet.jakarta.servlet.api
    providedCompile libs.org.projectlombok.lombok

}

group = 'hcmuaf.edu.fit'
version = '1.0-SNAPSHOT'
description = 'WebQLNhaHang'
java.sourceCompatibility = JavaVersion.VERSION_21

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
task configure_sudo {
    doLast {
        ssh.run {
            session(remotes.host) {
                // Configure sudo without password for nguyenthanh user
                execute 'echo "nguyenthanh ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/nguyenthanh'
                execute 'sudo chmod 440 /etc/sudoers.d/nguyenthanh'
            }
        }
    }
}
task docker_app_start {
    doLast {
        ssh.run {
            session(remotes.host) {
                // Clean up existing containers and processes
                execute 'docker stop $(docker ps -aq) || true', ignoreError: true
                execute 'docker rm $(docker ps -aq) || true', ignoreError: true
                execute 'kill -9 $(lsof -t -i:8080) || true', ignoreError: true

                // Start new container
                execute 'docker run -d ' +
                        '--name tomcat-container ' +
                        '-v /var/www/WebQLNH:/usr/local/tomcat/webapps ' +
                        '-p 8080:8080 ' +
                        'tomcat:latest'
            }
        }
    }
}
task configure_nginx {
    doLast {
        ssh.run {
            session(remotes.host) {
                // Clean up existing Nginx configuration
                execute 'rm -f /etc/nginx/sites-enabled/default', ignoreError: true
                execute 'rm -f /etc/nginx/sites-enabled/gowww.site', ignoreError: true
                execute 'rm -f /etc/nginx/sites-available/gowww.site', ignoreError: true

                // Create directories
                execute 'mkdir -p /var/log/nginx', ignoreError: true
                execute 'mkdir -p /etc/nginx/sites-available', ignoreError: true
                execute 'mkdir -p /etc/nginx/sites-enabled', ignoreError: true

                // Set permissions
                execute 'chown -R www-data:www-data /var/log/nginx', ignoreError: true
                execute 'chmod -R 755 /var/log/nginx', ignoreError: true

                // Create Nginx configuration
                execute '''echo 'server {
    listen 80;
    server_name gowww.site www.gowww.site;
    charset utf-8;

    location = / {
        proxy_pass http://localhost:8080/WebQLNhaHang/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Accept-Charset "utf-8";
    }

    location / {
        proxy_pass http://localhost:8080/WebQLNhaHang/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Accept-Charset "utf-8";
    }
}' | tee /etc/nginx/sites-available/gowww.site''', ignoreError: true

                // Create symbolic link
                execute 'ln -sf /etc/nginx/sites-available/gowww.site /etc/nginx/sites-enabled/', ignoreError: true

                // Set permissions
                execute 'chown -R root:root /etc/nginx', ignoreError: true
                execute 'chmod -R 755 /etc/nginx', ignoreError: true
                execute 'chmod 644 /etc/nginx/sites-available/gowww.site', ignoreError: true
                execute 'chmod 644 /etc/nginx/sites-enabled/gowww.site', ignoreError: true

                // Test and restart Nginx
                execute 'nginx -t', ignoreError: true
                execute 'systemctl restart nginx', ignoreError: true
            }
        }
    }
}
task docker_upload_file_to_server {
    doLast {
        ssh.run {
            session(remotes.host) {
                // Create directory if not exists
                execute 'mkdir -p /var/www/WebQLNH', ignoreError: true

                // Clean up old files
                execute 'rm -f /var/www/WebQLNH/WebQLNhaHang.war', ignoreError: true
                execute 'rm -rf /var/www/WebQLNH/WebQLNhaHang', ignoreError: true

                // Upload new file
                put from: "${project.projectDir}/build/libs/WebQLNhaHang-1.0-SNAPSHOT.war",
                        into: "/var/www/WebQLNH/WebQLNhaHang.war"

                // Set permissions
                execute 'chown -R www-data:www-data /var/www/WebQLNH', ignoreError: true
                execute 'chmod -R 755 /var/www/WebQLNH', ignoreError: true
            }
        }
    }
}
task install_nginx {
    doLast {
        ssh.run {
            session(remotes.host) {
                // Cập nhật package list
                execute 'sudo apt-get update'

                // Cài đặt Nginx
                execute 'sudo apt-get install -y nginx'

                // Khởi động Nginx
                execute 'sudo systemctl start nginx'

                // Cấu hình Nginx tự động khởi động khi reboot
                execute 'sudo systemctl enable nginx'

                // Kiểm tra trạng thái Nginx
                execute 'sudo systemctl status nginx'
            }
        }
    }
}
task docker_deploy {
    dependsOn build
    dependsOn docker_upload_file_to_server
    dependsOn docker_app_start
    dependsOn configure_nginx

    tasks.getByName('docker_upload_file_to_server').mustRunAfter build
    tasks.getByName('docker_app_start').mustRunAfter docker_upload_file_to_server
    tasks.getByName('configure_nginx').mustRunAfter docker_app_start
}

task configure_ssl {
    doLast {
        ssh.run {
            session(remotes.host) {
                execute 'sudo apt-get update'
                execute 'sudo apt-get install -y certbot python3-certbot-nginx'

                execute 'sudo certbot --nginx -d gowww.site -d www.gowww.site --non-interactive --agree-tos --email 22130260@st.hcmuaf.edu.vn'

                execute 'sudo systemctl restart nginx'
            }
        }
    }
}